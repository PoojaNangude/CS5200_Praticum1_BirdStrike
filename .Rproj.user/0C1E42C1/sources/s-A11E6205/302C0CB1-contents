---
title: "R Notebook"
output:
  html_document:
    df_print: paged
author:
  Harshith Sheshan
email:
  sheshan.h@northeastern.edu
---


# Question 1

Inspecting the data file; assume that this database will be used for an app that can be used by pilots (of any kind of aircraft) to report wildlife incidents. Create a new database and connect to it from R. Then create the following tables: incidents(iid, date, depPort, arrPort, airline, aircraft, flightPhase, impact). Only store the date, not the time of the incident. Use appropriate data types. Create a lookup table for airline called airlines that has attribute/columns: aid, code, airline. The file only contains the airline name but not the code, so leave that empty. Create a lookup table for airport called airports that has attributes: pid, code, name, city, state, country. Link the incidents, airlines, and airports tables via appropriate foreign keys. Leave any columns empty where you do not have data or cannot define a reasonable default. Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown. 
## 1.1Loading necessary libraries for the operations performed in the practicum
```{r}
##  1. Library
library(RMariaDB)


```

## 1.2Connecting to the MySQL database using the MariaDB connector.
```{r}
localuserpassword <- "Pooj@180598"
con <- dbConnect(RMariaDB::MariaDB(), user='root', password=localuserpassword, dbname='bird_strike', host='localhost')
dbListTables(con)



```

## 1.3 To drop table if it already exists.
```{sql connection=con}
drop table if exists incidents;

```



## 1.4 To create a table airlines to have details about airline. 
```{sql connection=con}

create table if not exists airlines(
  aid int primary key auto_increment,
  code varchar(10),
  airline varchar(50)
);
```


## 1.5Create a table airports that has the details of ports.
```{sql connection=con}
create table if not exists airports(
  pid int primary key auto_increment,
  code varchar(10),
  name varchar(50),
  city varchar(50),
  state varchar(50),
  country varchar(50)

);

```

## 1.6 To create an SQL table incidents which has the following schema. We have added foreign keys aid and pid which are used to link tables airlines and aircraft with incidents.
```{sql connection=con}

create table if not exists incidents(
  iid int primary key auto_increment,
  `date` date,
  pid int,
  aid int,
  port varchar(50),
  airline varchar(50),
  aircraft varchar(50),
  flight_phase varchar(50),
  impact varchar(50),
  foreign key(aid) references airlines(aid),
  foreign key(pid) references airports(pid)
)

```

## 1.7 Loads data from csv to a dataframe
```{r}

incidentdf <- read.csv("BirdStrikesData.csv",header = TRUE, stringsAsFactors = FALSE);


head(incidentdf,15)


```

## 1.8 To harmonize the values of the column When..Phase.of.flight to one of "Inflight" "Landing"  "Takeoff"  "Unkown" and replace the NA values in phase and operators with unknown.
```{r}
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight == "Landing Roll"] <- "Landing"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Take-off run"]<-"Takeoff"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Approach"]<-"Inflight"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Climb"]<-"Inflight"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Descent"]<-"Inflight"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Taxi"]<-"Unkown"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Parked"]<-"Unkown"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight==""]<-"Unkown"


incidentdf$Aircraft..Airline.Operator[incidentdf$Aircraft..Airline.Operator==""]<-"Unkown"
incidentdf$Airport..Name[incidentdf$Airport..Name==""]<-"Unknown"
```
## 1.9 To remove time from date

```{r}
incidentdf$FlightDate <- anytime::anydate(incidentdf$FlightDate)
```
## 1.10To verify that the values of When..Phase.of.flight
```{r}
unique(incidentdf$When..Phase.of.flight)


```

# Question 2
Place the Bird Strikes CSV file into the same folder as your R Notebook and the load it into R without a path name. The default path is the local folder that contains the R Notebook when you have the R Notebook in an R Project. Once loaded, populate the tables with the following subset of data. 
## 2.0 To write the dataframe to a raw table(Temprorary) in sql
```{r}
dbWriteTable(
  con,
  name="incidentRaw",
  value=incidentdf,
  row.names = FALSE,
  overwrite = TRUE,
  temporary = FALSE
)
```
## 2.1 To view contents and verify
```{sql connection=con}
select * from incidentRaw;

```
## 2.2 To clear the contents of previous incidents table
```{sql connection=con}
delete from incidents;

```
## 2.3 To clear the contents of previous airports table
```{sql connection=con}
delete from airports;

```
## 2.4 To clear the contents of previous airlines table
```{sql connection=con}

delete from airlines

```
## 2.5 To reset the autoincrement to 1
```{sql connection=con}
Alter table airports auto_increment = 1;
```
```{sql connection=con}
Alter table airlines auto_increment = 1;
```
## 2.6 To insert data into airlines
```{sql connection = con}
insert into airlines(airline)
select distinct incidentRaw.`Aircraft..Airline.Operator`
from incidentRaw ;

```

## 2.7 To insert data into airports
```{sql connection=con}
insert into airports(name,state)
select distinct(incidentRaw.`Airport..Name`),incidentRaw.`Origin.State`
from incidentRaw ;

```


## 2.8 To insert data into incidents
```{sql connection=con}
insert into incidents(`date`, port, airline, aircraft, flight_Phase, impact)
select `FlightDate`,`Airport..Name`,`Aircraft..Airline.Operator`,`Aircraft..Make.Model`, `When..Phase.of.flight`, `Effect..Indicated.Damage`
from incidentRaw

```


## 2.9 To lookup aid and pid from the table and fill values.
```{sql connection=con}
UPDATE incidents
INNER JOIN airlines
ON airlines.airline = incidents.airline
SET incidents.aid=airlines.aid;

```

```{sql connection=con}
alter table incidents
drop column airline;

```


```{sql connection=con}
UPDATE incidents
INNER JOIN airports
ON airports.name = incidents.port
SET incidents.pid=airports.pid;


```
```{sql connection=con}

Alter table incidents 
drop column port;


```


# Question 3
Show that the loading of the data worked by displaying parts of each table (do not show the entire tables).  Document and explain your decisions. See the Hints below for information on db4free. All data manipulation and importing work must occur in R. You may not modify the original data outside of R -- that would not be reproducible work. It may be helpful to create a subset of the data for development and testing as the full file is quite large and takes time to load.
## 3.0 To view the contents of tables incidents.
```{sql connection=con}
select * from incidents;

```
## 3.1 To view the tables airlines.
```{sql connection=con}
select * from airlines;

```
## 3.2 To view the tables airports.

```{sql connection=con}
select * from airports

```

# Question 4
Create a SQL query against your database to find the number of bird strike incidents for each airline arriving at LaGuardia airport during any phase of landing. You may either use a {sql} code chunk or an R function to execute the query. It must be a single query.

```{sql connection= con}
select count(*) as `Number of Bird Strike Incidents` 
from incidents,airports
where airports.name="LAGUARDIA NY" 
and
incidents.pid=airports.pid;


```
# Question 5 
Create a SQL query against your database to find the airport that had the most bird strike incidents (during any flight phase). Include all commercial airlines, i.e., no business, private, or military flights. You may either use a {sql} code chunk or an R function to execute the query. It must be a single query. Use reasonable rules to recognize business, private, or military flights. If you have some mixed in it is not a problem.

```{sql connection=con}
select max(airports.name)
from airports,incidents,airlines
where airports.pid=incidents.pid 
and airlines.aid=incidents.aid
and airlines.airline 
not in(select name 
        from airlines 
        where airline like "%Business" 
        or airline like "%private" 
        or airline like "%military%")

```
# Question 6
Create a SQL query against your database to find the number of bird strike incidents by year. Include all airlines and all flights. You may either use a {sql} code chunk or an R function to execute the query. It must be a single query.
```{sql connection=con}

select YEAR(`date`) as `Year`,count(*) as `Number of Incidents`
from incidents
group by YEAR(`date`)


```
# Question 7

Using the above data, build a line chart that visualizes the number of bird strikes incidents per year from 2005 to 2011. Adorn the graph with appropriate axis labels, titles, legend, data labels, etc.

## To get a dataframe of Year wise statistics of birdStrike incidents from year 2005 to 2011.
```{r}
rs = dbGetQuery(con, 
"select YEAR(`date`) as `Year`,count(*) as `Number of Incidents`
from incidents
where YEAR(`date`)>= 2005 and YEAR(`date`)<= 2011
group by YEAR(`date`) 
order by YEAR(`date`)")


rs
```

## To create a function to plot the line graph
```{r}
makePlot<-function(){
  x<-rs$`Year`; y=rs$`Number of Incidents`
  
  plot(x, y, type="b", pch=19, col="red", xlab="Year", ylab="Number of Incidents",main = "Incidents Statistics")
  lines(x, y, pch=18, col="red", type="l", lty=2)
}

```


## To call the function to plot the graph.
```{r}
makePlot()
legend("topleft", legend=c("change in incidents"),
       col=c("red"), lty=1:2, cex=0.8)
```

# Question 8
Create a stored procedure in MySQL (note that if you used SQLite, then you cannot complete this step) that removes a bird strike incident from the database. You may decide what you need to pass to the stored procedure to remove a bird strike incident, e.g., departure airport, airlines, or some ID. Show that the deletion worked as expected.

## To create a procedure to delete a record in incidents.
```{sql connection=con}

CREATE procedure deleteIncident (IN id int)
  delete from incidents
  where incidents.iid=id;

```
## To check the contents before calling the procedure.

```{sql connection=con}
select * from incidents;
```
## call function to delete the first row with iid=1
```{sql connection=con}
call deleteIncident(1);

```
##  to check if the proedure worked.
```{sql connection=con}
select * from incidents;

```

```{r}
dbDisconnect(con)

```


















