---
title:"Practicum 1"
output: html_notebook
---
#Question 1
##1.1Loading necessary libraries for the operations performed in the practicum
```{r}
# 1. Library
library(RMariaDB)
library(dbplyr)
library(tidyverse)


```

##1.2Connecting to the MySQL database using the MariaDB connector.
```{r}
localuserpassword <- "root1234"
con <- dbConnect(RMariaDB::MariaDB(), user='root', password=localuserpassword, dbname='birdStrikes', host='localhost')
dbListTables(con)



```

##1.3 To drop table if it already exists.
```{sql connection=con}
drop table if exists incidents;

```

##1.4 To create an SQL table incidents which has the following schema. We have added foreign keys aid and pid which are used to link tables airlines and aircraft with incidents.
```{sql connection=con}

create table if not exists incidents(
  iid int primary key auto_increment,
  `date` date,
  pid int,
  aid int,
  port varchar(50),
  airline varchar(50),
  aircraft varchar(50),
  flight_phase varchar(50),
  impact varchar(50),
  foreign key(aid) references airlines(aid),
  foreign key(pid) references airports(pid)
)

```

##1.5 To create a table airlines to have details about airline. 
```{sql connection=con}

create table if not exists airlines(
  aid int primary key auto_increment,
  code varchar(10),
  airline varchar(50)
);
```


##1.6Create a table airports that has the details of ports.
```{sql connection=con}
create table if not exists airports(
  pid int primary key auto_increment,
  code varchar(10),
  name varchar(50),
  city varchar(50),
  state varchar(50),
  country varchar(50)

);

```

##1.7 Loads data from csv to a dataframe
```{r}

incidentdf <- read.csv("BirdStrikesData.csv",header = TRUE, stringsAsFactors = FALSE);


head(incidentdf,15)


```

##1.8 To harmonize the values of the column When..Phase.of.flight to one of "Inflight" "Landing"  "Takeoff"  "Unkown" and replace the NA values in phase and operators with unknown.
```{r}
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight == "Landing Roll"] <- "Landing"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Take-off run"]<-"Takeoff"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Approach"]<-"Inflight"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Climb"]<-"Inflight"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Descent"]<-"Inflight"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Taxi"]<-"Unkown"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight=="Parked"]<-"Unkown"
incidentdf$When..Phase.of.flight[incidentdf$When..Phase.of.flight==""]<-"Unkown"


incidentdf$Aircraft..Airline.Operator[incidentdf$Aircraft..Airline.Operator==""]<-"Unkown"
incidentdf$Airport..Name[incidentdf$Airport..Name==""]<-"Unknown"
```
##1.9 To remove time from date

```{r}
incidentdf$FlightDate <- anytime::anydate(incidentdf$FlightDate)
```
##1.10To verify that the values of When..Phase.of.flight
```{r}
unique(incidentdf$When..Phase.of.flight)


```

#Question 2
##2.0 To write the dataframe to a raw table(Temprorary) in sql
```{r}
dbWriteTable(
  con,
  name="incidentRaw",
  value=incidentdf,
  row.names = FALSE,
  overwrite = TRUE,
  temporary = FALSE
)
```
##2.1 To view contents and verify
```{sql connection=con}
select * from incidentRaw;

```
##2.2 To clear the contents of previous incidents table
```{sql connection=con}
delete from incidents;

```
##2.3 To clear the contents of previous airports table
```{sql connection=con}
delete from airports;

```
##2.4 To clear the contents of previous airlines table
```{sql connection=con}

delete from airlines

```
##2.5 To reset the autoincrement to 1
```{sql connection=con}
Alter table airports auto_increment = 1;
```
```{sql connection=con}
Alter table airlines auto_increment = 1;
```
##2.6 To insert data into airlines
```{sql connection = con}
insert into airlines(airline)
select distinct incidentRaw.`Aircraft..Airline.Operator`
from incidentRaw ;

```

##2.7 To insert data into airports
```{sql connection=con}
insert into airports(name,state)
select distinct(incidentRaw.`Airport..Name`),incidentRaw.`Origin.State`
from incidentRaw ;

```


##2.8 To insert data into incidents
```{sql connection=con}
insert into incidents(`date`, port, airline, aircraft, flight_Phase, impact)
select `FlightDate`,`Airport..Name`,`Aircraft..Airline.Operator`,`Aircraft..Make.Model`, `When..Phase.of.flight`, `Effect..Indicated.Damage`
from incidentRaw

```


##2.9 To lookup aid and pid from the table and fill values.
```{sql connection=con}
UPDATE incidents
INNER JOIN airlines
ON airlines.airline = incidents.airline
SET incidents.aid=airlines.aid;

```

```{sql connection=con}
UPDATE incidents
INNER JOIN airports
ON airports.name = incidents.port
SET incidents.pid=airports.pid;


```

#Question 3
##3.0 To view the contents of tables incidents.
```{sql connection=con}
select * from incidents;

```
##3.1 To view the tables airlines.
```{sql connection=con}
select * from airlines;

```
##3.2 To view the tables airports.
```{sql connection=con}
```{sql connection=con}
select * from airports

```

##Question 4















